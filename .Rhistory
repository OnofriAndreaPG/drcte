sessionInfo()
library(drcte)
sessionInfo()
sessionInfo()
version
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
devtools::install_github("onofriAndreaPG/drcte")
devtools::install_github("onofriAndreaPG/drcte")
data(rape)
sessionInfo()
modTE <- drmte(nSeeds ~ timeBef + timeAf + Psi,
data = rape, fct = HTLL(), start = startList)
#devtools::load_all()
library(drcte)
sessionInfo()
startList <- c(0.67, 1.14, -0.95, 0.37) #Diverso calcolo valori iniziali
modTE <- drmte(nSeeds ~ timeBef + timeAf + Psi,
data = rape, fct = HTLL(), start = startList)
# modTE2 <- drcSeedGerm:::drm(nSeeds ~ timeBef + timeAf + Psi,
#             data = rape, fct = drcte::HTLL(), type = "event", start = startList)
summary(modTE)
summary(modTE2)
modTE3 <- drc::drm(nSeeds ~ timeBef + timeAf + Psi,
data = rape, fct = HTLL(), type = "event") # Not working
vcovCL(modTE, cluster = rape$Dish)
sandwich::vcovCL(modTE, cluster = rape$Dish)
sandwich::vcovCL(modTE2, cluster = rape$Dish)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute")
ED(modTE, Psi = 0, respLev = c(5, 10, 15, 23), type = "relative")
ED(modTE, Psi = 0, respLev = c(5, 10, 15, 21), type = "relative", rate = T)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta")
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
library(drcte)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
estfun(modTE)
estfun.drcte(modTE)
estfun.drc
estfun.drcte
estfun.drcte
estfun
sandwich::estfun
sandwich::estfun(modTE)
library(sandwich)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
estfun(modTE)
estfun(modTE)
estfun.drcte(modTE)
library(drcte)
?drc
?drm
library(drcte)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
estfun(modTE)
library(drcte)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
library(drcte)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
library(drcte)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta")
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
library(drcte)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta")
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
library(drcte)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta")
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
library(drcte)
library(drcte)
data(rape)
head(rape, 20)
startList <- c(0.67, 1.14, -0.95, 0.37) #Diverso calcolo valori iniziali
modTE <- drmte(nSeeds ~ timeBef + timeAf + Psi,
data = rape, fct = HTLL(), start = startList)
sandwich::vcovCL(modTE, cluster = rape$Dish)
sandwich::vcovCL(modTE2, cluster = rape$Dish)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute")
ED(modTE, Psi = 0, respLev = c(5, 10, 15, 23), type = "relative")
ED(modTE, Psi = 0, respLev = c(5, 10, 15, 21), type = "relative", rate = T)
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta")
ED(modTE, Psi = 0, respLev = c(0.05, 0.10, 0.15, 0.21), type = "absolute", rate = T,
interval = "delta", units = rape$Dish)
quantile(modTE, Psi = 0, probs = c(0.05, 0.10, 0.15, 0.21))
quantile(modTE, Psi = 0, probs = c(0.05, 0.10, 0.15, 0.21), restricted = T)
quantile(modTE, Psi = 0, probs = c(0.05, 0.10, 0.15, 0.21), restricted = F, rate = T)
quantile(modTE, Psi = 0, probs = c(0.05, 0.10, 0.15, 0.21), restricted = F, rate = T,
interval = "delta")
quantile(modTE, Psi = 0, probs = c(0.05, 0.10, 0.15, 0.21), restricted = F, rate = T,
interval = "delta", units = rape$Dish)
# This is to vectorise
psiList <- seq(0, 1, 0.25)
names(psiList) <- as.character(psiList)
lapply(psiList, function(x) quantile(modTE, Psi = x, probs = c(0.05, 0.10, 0.15, 0.21), restricted = F, rate = T,
interval = "delta", units = rape$Dish, display = F))
rm(list=ls())
setwd("~/Documents/_DBXAndrea/OneDrive/_Lavoro/__Notes/__Stats/seedGermination")
dataset <- read.csv("PIEN_3000.csv", header = T)
head(dataset)
setwd("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte")
library(drcte)
library(drcte)
mod <- drmte(NG ~ timeBef + timeAf, data = dataset,
curveid = comb, fct = NPMLE())
# First attempt: try to fit a nonparametric model
# for each temperature and Round
dataset$comb <- with(dataset, paste(Round, Temperature, sep= "_"))
dataset$comb2 <- factor(dataset$comb)
levels(dataset$comb2) <- 1:24
dataset$comb2 <- as.numeric(dataset$comb2)
library(drcte)
mod <- drmte(NG ~ timeBef + timeAf, data = dataset,
curveid = comb, fct = NPMLE())
plot(mod, shading = T, level = 1:3)
plot(mod, shading = T, level = 4:6)
plot(mod, shading = T, level = 7:9)
plot(mod, shading = T, level = 10:12)
plot(mod, shading = T, level = 13:15)
plot(mod, shading = T, level = 16:18)
plot(mod, shading = T, level = 19:21)
plot(mod, shading = T, level = 22:24)
# It is pretty clear that the three rounds can be pooled
# although this might be necessary to formally test
# Pooling (staying non-parametric)
mod <- drmte(NG ~ timeBef + timeAf, data = dataset,
curveid = Temperature, fct = NPMLE())
plot(mod, shading = T, level = 1:3)
plot(mod, shading = T)
?quantile.drcte
# Still exploring data: retreive the 10th, 30th and 50th quantiles
# for the germination rate
quantile(mod, probs = c(0.10, 0.30, 0.50))
# Still exploring data: retreive the 10th, 30th and 50th quantiles
# for the germination rate
quantile(mod, probs = c(0.10, 0.30, 0.50), rate = T)
# Still exploring data: retreive the 10th, 30th and 50th quantiles
# for the germination rate
GRs <- quantile(mod, probs = c(0.10, 0.30, 0.50), rate = T)
str(GRs)
View(GRs)
names(GRs)
rownames(GRs)
as.data.frame(rownames(GRs))
separate(as.data.frame(rownames(GRs)),
col = "rownames(GRs)", into = c("Temperature", "Prob"), sep = ".")
tidyr::separate(as.data.frame(rownames(GRs)),
col = "rownames(GRs)", into = c("Temperature", "Prob"), sep = ".")
tidyr::separate(data.frame(col=rownames(GRs)),
col = "col", into = c("Temperature", "Prob"),
sep = ".")
data.frame(col=rownames(GRs)
)
df <- data.frame(col=rownames(GRs)
tidyr::separate(),
col = "col", into = c("Temperature", "Prob"),
sep = ".")
df <- data.frame(col=rownames(GRs))
df
tidyr::separate(df,
col = "col", into = c("Temperature", "Prob"),
sep = ".")
df
?tidyr::separate
str(df)
tidyr::separate(df,
col = "col", into = c("Temperature", "Prob"),
sep = ".")
tidyr::separate(df,
col = "col", into = c("Temperature", "Prob"),
sep = ".", fille = "right")
tidyr::separate(df,
col = "col", into = c("Temperature", "Prob"),
sep = ".", fill = "right")
as.data.frame(do.call(rbind, strsplit(rownames(GRs), split=".")))
rownames(GRs)
rownames(GRs)
rn <- rownames(GRs)
strsplit(rn, split=".", fixed = FALSE, perl = FALSE)
?sub
sub("%", "", rn)
rn <- sub("%", "", rn)
strsplit(rn, split=".", fixed = FALSE, perl = FALSE)
rn <- sub(".", "-", rn)
rn
rn <- sub(".", "-", rn)
rn
rn <- sub("\.", "-", rn)
rn <- sub(".", "-", rn, fixed = T)
rn
rn <- rownames(GRs)
rn <- sub("%", "", rn)
rn <- sub(".", "-", rn, fixed = T)
strsplit(rn, split=".", fixed = T, perl = FALSE)
as.data.frame(do.call(rbind, strsplit(rownames(GRs), split=".", fixed = T)))
tidyr::separate(df,
col = "col", into = c("Temperature", "Prob"),
sep = ".", fixed = T)
# Still exploring data: retreive the 10th, 30th and 50th quantiles
# for the germination rate
GRs <- quantile(mod, probs = c(0.10, 0.30, 0.50), rate = T)
rn <- rownames(GRs)
rn <- sub("%", "", rn)
df <- as.data.frame(do.call(rbind, strsplit(rownames(GRs), split=".", fixed = T)))
df
df <- as.data.frame(do.call(rbind, strsplit(rn, split=".", fixed = T)))
df
df <- data.frame(df, GRs)
df
colnames(df) <- c("Temperature", "Perc", "GR")
df
head(df)
ggplot(df, aes(x = Temperature, y = GR, color = Perc)) +
geom_point()
library(ggplot2)
?ggplot
??ggplot
library(ggplot2)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(ggplot2)
ggplot(df, aes(x = Temperature, y = GR, color = Perc)) +
geom_point()
ggplot(df, aes(x = Temperature, y = GR, color = Perc)) +
geom_point() +
geom_line()
ggplot(df, aes(x = Temperature, y = GR, color = Perc)) +
geom_line()
?geom_line()
ggplot(df, aes(x = Temperature, y = GR, color = Perc)) +
geom_line(aes(x = Temperature, y = GR, color = Perc))
ggplot(df, aes(x = Temperature, y = GR, color = Perc)) +
geom_line(df, aes(x = Temperature, y = GR, color = Perc))
ggplot() +
geom_line(df, aes(x = Temperature, y = GR, color = Perc))
ggplot(df) +
geom_line(aes(x = Temperature, y = GR, color = Perc))
head(df)
ggplot(df) +
geom_line(aes(x = Temperature, y = GR, color = factor(Perc)))
ggplot(df) +
geom_line(aes(x = Temperature, y = GR))
ggplot(df) +
geom_point(aes(x = Temperature, y = GR))
str(df)
df <- mutate(df, across(1:2, as.numeric))
df <- dplyr::mutate(df, across(1:2, as.numeric))
df
library(ggplot2)
ggplot(df, aes(x = Temperature, y = GR, color = Perc)) +
geom_point()
# Still exploring data: retreive the 10th, 30th and 50th quantiles
# for the germination rate
GRs <- quantile(mod, probs = c(0.10, 0.30, 0.50), rate = T)
rn <- rownames(GRs)
rn <- sub("%", "", rn)
df <- as.data.frame(do.call(rbind, strsplit(rn, split=".", fixed = T)))
df <- data.frame(df, GRs)
colnames(df) <- c("Temperature", "Perc", "GR")
df
df$Temperature <- as.numeric(df$Temperature)
df
library(ggplot2)
ggplot(df, aes(x = Temperature, y = GR, color = Perc)) +
geom_point()
ggplot(df, aes(x = Temperature, y = GR, color = Perc)) +
geom_point() +
geom_line()
setwd("~/Documents/_DBXAndrea/OneDrive/_Lavoro/__Notes/__Stats/seedGermination")
write.csv(df, file = "PIEN_3000GR.csv", row.names = F)
setwd("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte")
# write.csv(df, file = "PIEN_3000GR.csv", row.names = F)
# Trying to fit a thermal-time model
library(drcSeedGerm)
modTT <- drm(GR ~ Temperature, data = df,
fct = GRT.M())
plot(modTT)
modTT <- drm(GR ~ Temperature, data = df,
fct = GRT.M(), curveid = Perc)
plot(modTT)
## ONE STEP ANALYSIS
head(dataset)
modTT1 <- drcte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTEM())
modTT1 <- drmte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTEM())
summary(modTT1)
modTT1 <- drmte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTERF())
summary(modTT1)
modTT1 <- drmte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTEM())
coef(modTT1)
modTT1 <- drmte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTEM(),
start = c(1, 30, 0.1, 10, 38, 1))
coef(modTT1)
plot(modTT, log = "x")
plot(modTT, log = "x")
modTT <- drm(GR ~ Temperature, data = df,
fct = GRT.M(), curveid = Perc)
plot(modTT, log = "x")
plot(modTT, log = "")
summary(modTT1)
# It is pretty clear that the three rounds can be pooled
# although this might be necessary to formally test
# Pooling (staying non-parametric)
mod <- drmte(NG ~ timeBef + timeAf, data = dataset,
curveid = Temperature, fct = NPMLE())
plot(mod, shading = T)
modTT1 <- drmte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTEM(),
start = c(1, 30, 0.1, 10, 38, 1))
coef(modTT1)
summary(modTT1)
modTT1 <- drmte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTEM(),
start = c(1, 30, 0.2, 10, 38, 1))
coef(modTT1)
summary(modTT1)
modTT1 <- drmte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTEM(),
start = c(1, 30, 0.9, 10, 38, 1))
coef(modTT1)
summary(modTT1)
modTT1 <- drmte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTEM(),
start = c(1, 38, 4, 4, 43, 4))
coef(modTT1)
summary(modTT1)
modTT1 <- drmte(NG ~ timeBef + timeAf + Temperature,
data = dataset,
fct = TTERF(),
start = c(1, 38, 4, 4, 43, 4))
