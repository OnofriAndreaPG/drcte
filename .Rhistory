# Chunk 1: setup
#Put at the beginning
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
knitr::knit_hooks$set(document = function(x){
gsub("```\n*```r*\n*", "", x)
})
options(width = 140)
# Chunk 2
library(drcte)
data(lotusOr)
print(lotusOr, row.names = F)
# Chunk 3
datasetG <- melt_te(lotusOr, count_cols = 3:17, treat_cols = Stage,
monitimes = 1:15, n.subjects = rep(25,12))
head(datasetG, 16)
# Chunk 4
datasetU <- melt_te(lotusOr, count_cols = 3:17, treat_cols = 1,
monitimes = 1:15, n.subjects = rep(25,12), grouped = F)
head(datasetU, 16)
# Chunk 5
# From LONG GROUPED to LONG UNGROUPED
datasetU2 <- ungroup_te(datasetG, count)[,-c(5, 6)]
head(datasetU2, 16)
# Chunk 6
# From LONG UNGROUPED to LONG GROUPED
datasetG2 <- group_te(datasetU)
head(datasetG2, 16)
# Chunk 7
data(lotusCum)
print(lotusCum[1:15,c(1:3,5)], row.names = F)
# Chunk 8
head(lotusCum)
dataset_sd <- decumulate_te(lotusCum,
resp = nCum,
treat_cols = Stage,
monitimes = Time,
units = Dish,
n.subjects = rep(25, 12),
type = "count")
dataset_sd <- decumulate_te(lotusCum,
resp = Prop,
treat_cols = "Stage",
monitimes = Time,
units = Dish,
n.subjects = rep(25, 12),
type = "proportion")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/reshape.te.R")
# Simple assay (no clustering)
rm(list = ls())
devtools::load_all()
data(chickweed)
head(chickweed)
mod <- drmte(count ~ start + end, fct = loglogistic(),
data = chickweed)
ob <- summary(mod) # Naive SEs
ob
# Robust standard errors
library(sandwich)
library(lmtest)
coeftest(mod, vcov = sandwich) # Sandwich SEs (no clustering)
tab <- summary(mod, robust = T)
tab
# Bootstrap SEs
set.seed(1234)
ret <- boot.drcte(mod, B = 499)
# Jackknife SEs
ret2 <- jack.drcte(mod, B = 499)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
ret2 <- jack.drcte(mod, B = 499)
chickweed
sum(chickweed$count)
ungroup_te(chickweed, chickweed$count)
ungroup_te(chickweed, count)
obj
obj <- mod
obj$dataList$origResp
obj$dataList$names
obj$dataList$names$orName
deparse(substitute(obj$dataList$names$orName))
cnt <- obj$dataList$names$orName
cnt
dfr[[,cnt]]
dfr <- obj$data
cnt <- obj$dataList$names$orName
dfr[[,cnt]]
ungroup_te(dfr, cnt)
ungroup_te(dfr, deparse(substitute(cnt)))
dfr[,"cnt"]
dfr[,colnames(dfr) == cnt]
dfr[,-colnames(dfr) == cnt]
dfr[,colnames(dfr) == cnt]
dfr[,colnames(dfr) != cnt]
ungroup_te(dfr, cnt)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/reshape.te.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
ungroup_te(dfr, counts)
head(dfr)
ungroup_te(dfr, count)
dfr <- obj$origData
head(dfr)
ungroup_te(dfr, count)
ungroup_te(dfr, counts)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/reshape.te.R")
ungroup_te(chickweed, count)
ungroup_te(chickweed, chickweed$count)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/reshape.te.R")
ungroup_te(chickweed, chickweed$count)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/reshape.te.R")
ungroup_te(chickweed, chickweed$count)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/reshape.te.R")
ungroup_te(chickweed, chickweed$count)
ungroup_te(chickweed, count)
dfr <- obj$origData
cnt <- obj$dataList$names$orName
dfr[,colnames(dfr) != cnt]
dfr <- dfr[,colnames(dfr) != cnt]
dfr
dfr <- obj$origData
cnt <- obj$dataList$names$orName
cnt
ungroup_te(dfr, cnt)
ungroup_te(dfr, deparse(cnt))
substitute(cnt)
ungroup_te(dfr, substitute(cnt))
dfr
cnt <- dfr[,colnames(dfr) == cnt]
ungroup_te(dfr, cnt)
print(df)
df
numFac <- length(attr(terms(as.formula(obj$call$formula)), "term.labels"))
counts <- obj$data[,numFac + 1]
L <- rep(obj$data[,1], counts)
R <- rep(obj$data[,2], counts)
numTreat <- length(levels(factor(obj$data[, numFac + 2])))
if(numTreat == 1) {
df <- data.frame(L, R)
} else if(numTreat > 1) {
treats <- rep(obj$data[,numFac + 2], counts)
df <- data.frame(L, R, treats)
}
print(df)
ungroup_te(chickweed, chickweed$count)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/reshape.te.R")
ungroup_te(chickweed, chickweed$count)
ungroup_te(chickweed, count)
pr <- chickweed$count
ungroup_te(chickweed, pr)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/reshape.te.R")
ungroup_te(chickweed, pr)
ungroup_te(chickweed, count)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
ret2 <- jack.drcte(mod, B = 499)
estim <- coef(obj)
esN <- summary(obj)[[3]][,2]
esN
estim
summary(obj)
summary(obj)[[3]]
summary(obj)[[3]][,2]
numParms <- length(estim)
estim2 <- data.frame()
cont <- 0
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
ret2 <- jack.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
ret2 <- jack.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
ret2 <- jack.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
ret2 <- jack.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
ret2 <- jack.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Simple assay without treatments with replicates
# Resampling must be done of observations within treatments
# Sampling observations may lead to situations where a
# parametric model cannot be fitted
rm(list = ls())
devtools::load_all
devtools::load_all()
data(lotus)
lotusR <- subset(lotus, Dish == 1 |
Dish == 5 |
Dish == 9)
lotusR
# Simple assay with treatments but without replicates
# Resampling must be done of observations within treatments
# Sampling observations may lead to situations where a
# parametric model cannot be fitted
rm(list = ls())
devtools::load_all()
data(lotus)
lotusR <- subset(lotus, Dish == 1 |
Dish == 5 |
Dish == 9)
lotusR
mod <- drmte(count ~ timeBef + timeAf,
fct = loglogistic(fixed = c(NA, 1, NA)),
data = lotusR, curveid = Stage)
summary(mod) # Naive SEs
plot(mod, ylim =c(0,1))
class(mod)
library(sandwich)
library(lmtest)
coeftest(mod, vcov = sandwich) # Sandwich SEs (no clustering)
boot.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
boot.drcte(mod)
obj$data
mod$data
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
boot.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
boot.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
boot.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
boot.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
coef(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
boot.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
boot.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
boot.drcte(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
boot.drcte(mod)
summary(mod) # Naive SEs
coeftest(mod, vcov = sandwich) # Sandwich SEs (no clustering)
ret <- boot.drcte(mod)
ret
ret$resamples
ret
# Assay without treatments, with replicates ############
devtools::load_all()
# Assay without treatments, with replicates ############
rm(list = ls())
devtools::load_all()
devtools::load_all()
data(verbascum)
verbascumR <- subset(verbascum, Species == "creticum")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
mod <- drmte(nSeeds ~ timeBef + timeAf, fct = loglogistic(),
data = verbascumR)
plot(mod)
summary(mod)
# Sandwich errors
summary(mod, units = verbascumR$Dish)
# Sandwich errors
coeftest(mod, vcov = vcovCL, cluster = verbascumR$Dish) # Sandwich SEs (no clustering)
summary(mod, units = verbascumR$Dish)
# Sandwich standard errors
library(sandwich)
library(lmtest)
coeftest(mod, vcov = sandwich)
coeftest(mod, vcov = vcovCL, cluster = lotus$Dish)
coeftest(mod, vcov = sandwich)
coeftest(mod, vcov = vcovCL, cluster = verbascumR$Dish)
coeftest(mod, vcov = vcovCL(mod, cluster = verbascumR$Dish))
summary(mod, units = verbascumR$Dish)
# Jackknife SEs
jack.drcte(mod, data=verbascumR, units = verbascumR$Dish)
# Jackknife SEs
jack.drcte(mod, data=verbascumR, cluster = verbascumR$Dish)
# Jackknife SEs
jack.drcte(mod, data=verbascumR, cluster = verbascumR$Dish)
# Jackknife SEs
jack.drcte2(mod, data=verbascumR, cluster = verbascumR$Dish)
jack.drcte2(mod, units = verbascumR$Dish)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
jack.drcte2(mod, units = verbascumR$Dish)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
jack.drcte(mod, data=verbascumR, cluster = verbascumR$Dish)
jack.drcte2(mod, units = verbascumR$Dish)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
jack.drcte(mod, data=verbascumR, cluster = verbascumR$Dish)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
jack.drcte(mod, data=verbascumR, cluster = verbascumR$Dish)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
jack.drcte(mod, data=verbascumR, cluster = verbascumR$Dish)
# Jackknife SEs
tab <- jack.drcte(mod, data=verbascumR, cluster = verbascumR$Dish)
tab$resamples
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
tab <- jack.drcte(mod, data=verbascumR, cluster = verbascumR$Dish)
tab$resamples
tab
summary(mod, units = verbascumR$Dish)
summary(mod)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_boot.R")
# Bootstrap standard errors
boot.drcte(mod, units = Dish)
# Bootstrap standard errors
boot.drcte(mod, units = verbascumR$Dish)
# Bootstrap standard errors
boot.drcte(mod, units = verbascumR$Dish)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
tab <- jack.drcte(mod, units = verbascumR$Dish)
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
tab <- jack.drcte(mod, units = verbascumR$Dish)
tab
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
tab <- jack.drcte(mod, units = verbascumR$Dish)
tab
source("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/drcte/R/SE_jack.R")
# Jackknife SEs
tab <- jack.drcte(mod, units = verbascumR$Dish)
tab
# Assay with treatments and replicates
rm(list = ls())
devtools::load_all()
data(rape)
data(drcSeedGerm::rape)
library(drcte)
data(rape)
devtools::install_github("onofriandreapg/drcSeedGerm")
data(drcSeedGerm::rape)
?data
data(rape, package = drcSeedGerm)
data(rape, package = "drcSeedGerm")
modHTE <- drmte(nSeeds ~ timeBef + timeAf,
data = rape, fct = LL.3(), curveid = Psi)
data(lotus)
modHTE <- drmte(nSeeds ~ timeBef + timeAf,
data = lotus, fct = LL.3(), curveid = Stage)
head(lotus)
modHTE <- drmte(count ~ timeBef + timeAf,
data = lotus, fct = LL.3(), curveid = Stage)
modHTE <- drmte(count ~ timeBef + timeAf,
data = lotus, fct = loglogistic(), curveid = Stage)
plot(modHTE)
summary(modHTE)
modHTE <- drmte(count ~ timeBef + timeAf,
data = lotus, fct = loglogistic(), curveid = Stage,
upperl = c(NA, NA, NA, NA, 1, NA, NA, NA, NA))
modHTE <- drmte(count ~ timeBef + timeAf,
data = lotus, fct = loglogistic(),
curveid = Stage) #,
# upperl = c(NA, NA, NA, NA, 1, NA, NA, NA, NA))
summary(modHTE)
summary(modHTE, units = Dish)
summary(modHTE, units = lotus$Dish)
# Jackknife SEs
tab <- jack.drcte(modHTE, units = lotus$Dish)
tab
summary(modHTE, units = lotus$Dish)
tab
tab$resamples
tab$resamples[1:4,]
apply(tab$resamples[1:4,], 1, sd)
tab
apply(tab$resamples[1:4,], 1, sd)
summary(modHTE, units = lotus$Dish)
# upperl = c(NA, NA, NA, NA, 1, NA, NA, NA, NA))
summary(modHTE)
tab
# Single assay ######################
L <- 1:15
R <- 1:15
df <- data.frame(L, R)
set.seed(1234)
pr <- drcte:::resample.cens(df, replace = T) # resampling
pr
drcte:::resample.cens(df, replace = F) # Permuting, not resampling at all
# Single assay with replicates
L <- 1:60
R <- 1:60
df <- data.frame(L, R)
groups <- rep(1:4, each = 15)
set.seed(1234)
drcte:::resample.cens(df, replace = T) # sampling all observations
drcte:::resample.cens(df, groups, replace = list(T, T)) # resampling groups and units
drcte:::resample.cens(df, groups, replace = list(F, T)) # resampling groups but not units
drcte:::resample.cens(df, groups, replace = list(T, F)) # resampling units but not groups
drcte:::resample.cens(df, replace = T) # resampling all observations
drcte:::resample.cens(df, groups, replace = list(T, T)) # resampling groups and units
df <- data.frame(L, R, groups)
set.seed(1234)
drcte:::resample.cens(df, replace = T) # resampling all observations
drcte:::resample.cens(df, groups, replace = list(T, T)) # resampling groups and units
drcte:::resample.cens(df, groups, replace = list(F, T)) # resampling groups but not units
drcte:::resample.cens(df, groups, replace = list(T, F)) # resampling units but not groups
